/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// Provides details about an authentication site
    /// </summary>
    [DataContract(Name = "AuthSite")]
    public partial class AuthSite : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthSite" /> class.
        /// </summary>
        /// <param name="name">Name of the authentication site.</param>
        /// <param name="id">Internal identifier for the authentication site.</param>
        /// <param name="siteTypeId">Type of the authentication site.  See @see(GetSiteTypes) to obtain a list of type ids.</param>
        /// <param name="url">Root URL to the site.</param>
        public AuthSite(string name = default(string), int id = default(int), int siteTypeId = default(int), string url = default(string))
        {
            this.Name = name;
            this.Id = id;
            this.SiteTypeId = siteTypeId;
            this.Url = url;
        }

        /// <summary>
        /// Name of the authentication site
        /// </summary>
        /// <value>Name of the authentication site</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Internal identifier for the authentication site
        /// </summary>
        /// <value>Internal identifier for the authentication site</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Type of the authentication site.  See @see(GetSiteTypes) to obtain a list of type ids
        /// </summary>
        /// <value>Type of the authentication site.  See @see(GetSiteTypes) to obtain a list of type ids</value>
        [DataMember(Name = "SiteTypeId", EmitDefaultValue = false)]
        public int SiteTypeId { get; set; }

        /// <summary>
        /// Root URL to the site
        /// </summary>
        /// <value>Root URL to the site</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthSite {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SiteTypeId: ").Append(SiteTypeId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
