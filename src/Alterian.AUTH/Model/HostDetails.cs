/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// HostDetails
    /// </summary>
    [DataContract(Name = "HostDetails")]
    public partial class HostDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostDetails" /> class.
        /// </summary>
        /// <param name="host">This is the name of the website in the IMS installation which is running the webserver.             The Host value is used to control access to this Tridion site, and by default will allow access to every user in this host..</param>
        /// <param name="isHTTPS">This is a flag to say whether the Tridion site is available in an HTTPS installation of IMS.              If your IMS installation is using HTTPS then set this to 1, otherwise leave it as 0..</param>
        public HostDetails(string host = default(string), bool isHTTPS = default(bool))
        {
            this.Host = host;
            this.IsHTTPS = isHTTPS;
        }

        /// <summary>
        /// This is the name of the website in the IMS installation which is running the webserver.             The Host value is used to control access to this Tridion site, and by default will allow access to every user in this host.
        /// </summary>
        /// <value>This is the name of the website in the IMS installation which is running the webserver.             The Host value is used to control access to this Tridion site, and by default will allow access to every user in this host.</value>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// This is a flag to say whether the Tridion site is available in an HTTPS installation of IMS.              If your IMS installation is using HTTPS then set this to 1, otherwise leave it as 0.
        /// </summary>
        /// <value>This is a flag to say whether the Tridion site is available in an HTTPS installation of IMS.              If your IMS installation is using HTTPS then set this to 1, otherwise leave it as 0.</value>
        [DataMember(Name = "isHTTPS", EmitDefaultValue = true)]
        public bool IsHTTPS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HostDetails {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  IsHTTPS: ").Append(IsHTTPS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
