/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// Info for a particular login
    /// </summary>
    [DataContract(Name = "LoginInfo")]
    public partial class LoginInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginInfo" /> class.
        /// </summary>
        /// <param name="iD">Id of the login.</param>
        /// <param name="name">The login name.</param>
        /// <param name="windowsAuthentication">Does this login use external authentication?.</param>
        /// <param name="settings">Settings for this login.</param>
        /// <param name="newPassword">If you want to update the password for a login, include a NewPassword.  You can use this in a call to @see(UpdateLogin).</param>
        /// <param name="enabled">Is this login flagged as disabled.</param>
        /// <param name="passwordExpires">If set, this is when the password for this login will expire.  Any changes to this will be compared to the password policy.</param>
        /// <param name="lastLogin">Last time this login was used.</param>
        /// <param name="created">When was this login created.</param>
        /// <param name="modified">Last time this login was modified.</param>
        public LoginInfo(Guid iD = default(Guid), string name = default(string), bool windowsAuthentication = default(bool), List<SettingValue> settings = default(List<SettingValue>), string newPassword = default(string), bool enabled = default(bool), DateTime? passwordExpires = default(DateTime?), DateTime? lastLogin = default(DateTime?), DateTime created = default(DateTime), DateTime modified = default(DateTime))
        {
            this.ID = iD;
            this.Name = name;
            this.WindowsAuthentication = windowsAuthentication;
            this.Settings = settings;
            this.NewPassword = newPassword;
            this.Enabled = enabled;
            this.PasswordExpires = passwordExpires;
            this.LastLogin = lastLogin;
            this.Created = created;
            this.Modified = modified;
        }

        /// <summary>
        /// Id of the login
        /// </summary>
        /// <value>Id of the login</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public Guid ID { get; set; }

        /// <summary>
        /// The login name
        /// </summary>
        /// <value>The login name</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Does this login use external authentication?
        /// </summary>
        /// <value>Does this login use external authentication?</value>
        [DataMember(Name = "WindowsAuthentication", EmitDefaultValue = true)]
        public bool WindowsAuthentication { get; set; }

        /// <summary>
        /// Settings for this login
        /// </summary>
        /// <value>Settings for this login</value>
        [DataMember(Name = "Settings", EmitDefaultValue = false)]
        public List<SettingValue> Settings { get; set; }

        /// <summary>
        /// If you want to update the password for a login, include a NewPassword.  You can use this in a call to @see(UpdateLogin)
        /// </summary>
        /// <value>If you want to update the password for a login, include a NewPassword.  You can use this in a call to @see(UpdateLogin)</value>
        [DataMember(Name = "NewPassword", EmitDefaultValue = false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Is this login flagged as disabled
        /// </summary>
        /// <value>Is this login flagged as disabled</value>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// If set, this is when the password for this login will expire.  Any changes to this will be compared to the password policy
        /// </summary>
        /// <value>If set, this is when the password for this login will expire.  Any changes to this will be compared to the password policy</value>
        [DataMember(Name = "PasswordExpires", EmitDefaultValue = true)]
        public DateTime? PasswordExpires { get; set; }

        /// <summary>
        /// Last time this login was used
        /// </summary>
        /// <value>Last time this login was used</value>
        [DataMember(Name = "LastLogin", EmitDefaultValue = true)]
        public DateTime? LastLogin { get; set; }

        /// <summary>
        /// When was this login created
        /// </summary>
        /// <value>When was this login created</value>
        [DataMember(Name = "Created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Last time this login was modified
        /// </summary>
        /// <value>Last time this login was modified</value>
        [DataMember(Name = "Modified", EmitDefaultValue = false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginInfo {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WindowsAuthentication: ").Append(WindowsAuthentication).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  PasswordExpires: ").Append(PasswordExpires).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
