/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// GetLoginsRequest
    /// </summary>
    [DataContract(Name = "GetLogins_request")]
    public partial class GetLoginsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLoginsRequest" /> class.
        /// </summary>
        /// <param name="enabled">If you want to query by the enabled, provide this parameter.</param>
        /// <param name="exclusion">List of login Ids to exclude from the result.</param>
        /// <param name="inclusion">List of login Ids to return.</param>
        /// <param name="noSettings">If you do not want settings to be returns, pass in true.</param>
        /// <param name="settingValues">If you would like to query by setting value, populate this dictionary.</param>
        public GetLoginsRequest(bool? enabled = default(bool?), List<Guid> exclusion = default(List<Guid>), List<Guid> inclusion = default(List<Guid>), bool noSettings = default(bool), Dictionary<string, int> settingValues = default(Dictionary<string, int>))
        {
            this.Enabled = enabled;
            this.Exclusion = exclusion;
            this.Inclusion = inclusion;
            this.NoSettings = noSettings;
            this.SettingValues = settingValues;
        }

        /// <summary>
        /// If you want to query by the enabled, provide this parameter
        /// </summary>
        /// <value>If you want to query by the enabled, provide this parameter</value>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// List of login Ids to exclude from the result
        /// </summary>
        /// <value>List of login Ids to exclude from the result</value>
        [DataMember(Name = "Exclusion", EmitDefaultValue = false)]
        public List<Guid> Exclusion { get; set; }

        /// <summary>
        /// List of login Ids to return
        /// </summary>
        /// <value>List of login Ids to return</value>
        [DataMember(Name = "Inclusion", EmitDefaultValue = false)]
        public List<Guid> Inclusion { get; set; }

        /// <summary>
        /// If you do not want settings to be returns, pass in true
        /// </summary>
        /// <value>If you do not want settings to be returns, pass in true</value>
        [DataMember(Name = "NoSettings", EmitDefaultValue = true)]
        public bool NoSettings { get; set; }

        /// <summary>
        /// If you would like to query by setting value, populate this dictionary
        /// </summary>
        /// <value>If you would like to query by setting value, populate this dictionary</value>
        [DataMember(Name = "SettingValues", EmitDefaultValue = false)]
        public Dictionary<string, int> SettingValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLoginsRequest {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Exclusion: ").Append(Exclusion).Append("\n");
            sb.Append("  Inclusion: ").Append(Inclusion).Append("\n");
            sb.Append("  NoSettings: ").Append(NoSettings).Append("\n");
            sb.Append("  SettingValues: ").Append(SettingValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
