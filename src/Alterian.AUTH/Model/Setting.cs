/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// Setting
    /// </summary>
    [DataContract(Name = "Setting")]
    public partial class Setting : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name = "AppliesTo", EmitDefaultValue = false)]
        public SettingAppliesTo? AppliesTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Setting" /> class.
        /// </summary>
        /// <param name="iD">Id of the setting.</param>
        /// <param name="name">Name of the setting, must be unique.</param>
        /// <param name="appliesTo">appliesTo.</param>
        /// <param name="isSystem">Is this a system setting?  if so, any attempts to modify it will result in an AccessDenied error.  You can create a setting with IsSystem but, once created, you will not be able to change it [or delete it].</param>
        /// <param name="value">This is only filled in with a call to @see(GetSettingsValues).  It is ignored when creating settings.</param>
        public Setting(int iD = default(int), string name = default(string), SettingAppliesTo? appliesTo = default(SettingAppliesTo?), bool isSystem = default(bool), string value = default(string))
        {
            this.ID = iD;
            this.Name = name;
            this.AppliesTo = appliesTo;
            this.IsSystem = isSystem;
            this.Value = value;
        }

        /// <summary>
        /// Id of the setting
        /// </summary>
        /// <value>Id of the setting</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of the setting, must be unique
        /// </summary>
        /// <value>Name of the setting, must be unique</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Is this a system setting?  if so, any attempts to modify it will result in an AccessDenied error.  You can create a setting with IsSystem but, once created, you will not be able to change it [or delete it]
        /// </summary>
        /// <value>Is this a system setting?  if so, any attempts to modify it will result in an AccessDenied error.  You can create a setting with IsSystem but, once created, you will not be able to change it [or delete it]</value>
        [DataMember(Name = "IsSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// This is only filled in with a call to @see(GetSettingsValues).  It is ignored when creating settings
        /// </summary>
        /// <value>This is only filled in with a call to @see(GetSettingsValues).  It is ignored when creating settings</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Setting {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
