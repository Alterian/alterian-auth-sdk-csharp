/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// FormsAuthenticationRequest
    /// </summary>
    [DataContract(Name = "FormsAuthentication_request")]
    public partial class FormsAuthenticationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormsAuthenticationRequest" /> class.
        /// </summary>
        /// <param name="bumpExisting">Not used at this time..</param>
        /// <param name="newPassword">If a password change is required, provide it here..</param>
        /// <param name="password">SHA1 Encoded password.</param>
        /// <param name="username">The login name.</param>
        public FormsAuthenticationRequest(bool bumpExisting = default(bool), string newPassword = default(string), string password = default(string), string username = default(string))
        {
            this.BumpExisting = bumpExisting;
            this.NewPassword = newPassword;
            this.Password = password;
            this.Username = username;
        }

        /// <summary>
        /// Not used at this time.
        /// </summary>
        /// <value>Not used at this time.</value>
        [DataMember(Name = "BumpExisting", EmitDefaultValue = true)]
        public bool BumpExisting { get; set; }

        /// <summary>
        /// If a password change is required, provide it here.
        /// </summary>
        /// <value>If a password change is required, provide it here.</value>
        [DataMember(Name = "NewPassword", EmitDefaultValue = false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// SHA1 Encoded password
        /// </summary>
        /// <value>SHA1 Encoded password</value>
        [DataMember(Name = "Password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// The login name
        /// </summary>
        /// <value>The login name</value>
        [DataMember(Name = "Username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormsAuthenticationRequest {\n");
            sb.Append("  BumpExisting: ").Append(BumpExisting).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
