/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.AUTH.Client.OpenAPIDateConverter;

namespace Alterian.AUTH.Model
{
    /// <summary>
    /// Issuer of Certificate for single sign on
    /// </summary>
    [DataContract(Name = "Issuer")]
    public partial class Issuer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Issuer" /> class.
        /// </summary>
        /// <param name="iD">Id of the Issuer.</param>
        /// <param name="name">Name of the Issuer.</param>
        /// <param name="certificateID">Id of the associated certificate.</param>
        /// <param name="settings">Collection of settings which this issuer uses as assertions for incoming SAML authentication requests.</param>
        public Issuer(int iD = default(int), string name = default(string), int certificateID = default(int), List<int> settings = default(List<int>))
        {
            this.ID = iD;
            this.Name = name;
            this.CertificateID = certificateID;
            this.Settings = settings;
        }

        /// <summary>
        /// Id of the Issuer
        /// </summary>
        /// <value>Id of the Issuer</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of the Issuer
        /// </summary>
        /// <value>Name of the Issuer</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Id of the associated certificate
        /// </summary>
        /// <value>Id of the associated certificate</value>
        [DataMember(Name = "CertificateID", EmitDefaultValue = false)]
        public int CertificateID { get; set; }

        /// <summary>
        /// Collection of settings which this issuer uses as assertions for incoming SAML authentication requests
        /// </summary>
        /// <value>Collection of settings which this issuer uses as assertions for incoming SAML authentication requests</value>
        [DataMember(Name = "Settings", EmitDefaultValue = false)]
        public List<int> Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Issuer {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CertificateID: ").Append(CertificateID).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
