/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISitesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This is the name of the server that you have IMS running on
        /// </summary>
        /// <remarks>
        /// This is the name of the server that you have IMS running on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHostNamesDefaultResponse</returns>
        GetHostNamesDefaultResponse GetHostNames(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);

        /// <summary>
        /// This is the name of the server that you have IMS running on
        /// </summary>
        /// <remarks>
        /// This is the name of the server that you have IMS running on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHostNamesDefaultResponse</returns>
        ApiResponse<GetHostNamesDefaultResponse> GetHostNamesWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);
        /// <summary>
        /// Return back a specific @see(AuthSite)
        /// </summary>
        /// <remarks>
        /// Return back a specific @see(AuthSite)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSiteDefaultResponse</returns>
        GetSiteDefaultResponse GetSite(GetSiteRequest getSiteRequest, int operationIndex = 0);

        /// <summary>
        /// Return back a specific @see(AuthSite)
        /// </summary>
        /// <remarks>
        /// Return back a specific @see(AuthSite)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSiteDefaultResponse</returns>
        ApiResponse<GetSiteDefaultResponse> GetSiteWithHttpInfo(GetSiteRequest getSiteRequest, int operationIndex = 0);
        /// <summary>
        /// Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <remarks>
        /// Return back a list of site types for use with @see(GetSites)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSiteTypesDefaultResponse</returns>
        GetSiteTypesDefaultResponse GetSiteTypes(int operationIndex = 0);

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <remarks>
        /// Return back a list of site types for use with @see(GetSites)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSiteTypesDefaultResponse</returns>
        ApiResponse<GetSiteTypesDefaultResponse> GetSiteTypesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSitesDefaultResponse</returns>
        GetSitesDefaultResponse GetSites(GetSitesRequest getSitesRequest, int operationIndex = 0);

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSitesDefaultResponse</returns>
        ApiResponse<GetSitesDefaultResponse> GetSitesWithHttpInfo(GetSitesRequest getSitesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISitesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This is the name of the server that you have IMS running on
        /// </summary>
        /// <remarks>
        /// This is the name of the server that you have IMS running on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHostNamesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetHostNamesDefaultResponse> GetHostNamesAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This is the name of the server that you have IMS running on
        /// </summary>
        /// <remarks>
        /// This is the name of the server that you have IMS running on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHostNamesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetHostNamesDefaultResponse>> GetHostNamesWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a specific @see(AuthSite)
        /// </summary>
        /// <remarks>
        /// Return back a specific @see(AuthSite)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSiteDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSiteDefaultResponse> GetSiteAsync(GetSiteRequest getSiteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a specific @see(AuthSite)
        /// </summary>
        /// <remarks>
        /// Return back a specific @see(AuthSite)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSiteDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSiteDefaultResponse>> GetSiteWithHttpInfoAsync(GetSiteRequest getSiteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <remarks>
        /// Return back a list of site types for use with @see(GetSites)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSiteTypesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSiteTypesDefaultResponse> GetSiteTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <remarks>
        /// Return back a list of site types for use with @see(GetSites)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSiteTypesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSiteTypesDefaultResponse>> GetSiteTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSitesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSitesDefaultResponse> GetSitesAsync(GetSitesRequest getSitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSitesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSitesDefaultResponse>> GetSitesWithHttpInfoAsync(GetSitesRequest getSitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISitesApi : ISitesApiSync, ISitesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SitesApi : ISitesApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SitesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SitesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SitesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SitesApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SitesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SitesApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SitesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SitesApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This is the name of the server that you have IMS running on This is the name of the server that you have IMS running on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetHostNamesDefaultResponse</returns>
        public GetHostNamesDefaultResponse GetHostNames(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetHostNamesDefaultResponse> localVarResponse = GetHostNamesWithHttpInfo(getCertificatesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This is the name of the server that you have IMS running on This is the name of the server that you have IMS running on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetHostNamesDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetHostNamesDefaultResponse> GetHostNamesWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling SitesApi->GetHostNames");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "SitesApi.GetHostNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetHostNamesDefaultResponse>("/GetHostNames", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHostNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This is the name of the server that you have IMS running on This is the name of the server that you have IMS running on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetHostNamesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetHostNamesDefaultResponse> GetHostNamesAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetHostNamesDefaultResponse> localVarResponse = await GetHostNamesWithHttpInfoAsync(getCertificatesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This is the name of the server that you have IMS running on This is the name of the server that you have IMS running on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">This is the name of the server that you have IMS running on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetHostNamesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetHostNamesDefaultResponse>> GetHostNamesWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling SitesApi->GetHostNames");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "SitesApi.GetHostNames";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetHostNamesDefaultResponse>("/GetHostNames", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHostNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a specific @see(AuthSite) Return back a specific @see(AuthSite)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSiteDefaultResponse</returns>
        public GetSiteDefaultResponse GetSite(GetSiteRequest getSiteRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSiteDefaultResponse> localVarResponse = GetSiteWithHttpInfo(getSiteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a specific @see(AuthSite) Return back a specific @see(AuthSite)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSiteDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSiteDefaultResponse> GetSiteWithHttpInfo(GetSiteRequest getSiteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSiteRequest' is set
            if (getSiteRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSiteRequest' when calling SitesApi->GetSite");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSiteRequest;

            localVarRequestOptions.Operation = "SitesApi.GetSite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSiteDefaultResponse>("/GetSite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a specific @see(AuthSite) Return back a specific @see(AuthSite)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSiteDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSiteDefaultResponse> GetSiteAsync(GetSiteRequest getSiteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSiteDefaultResponse> localVarResponse = await GetSiteWithHttpInfoAsync(getSiteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a specific @see(AuthSite) Return back a specific @see(AuthSite)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteRequest">Return back a specific @see(AuthSite)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSiteDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSiteDefaultResponse>> GetSiteWithHttpInfoAsync(GetSiteRequest getSiteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSiteRequest' is set
            if (getSiteRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSiteRequest' when calling SitesApi->GetSite");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSiteRequest;

            localVarRequestOptions.Operation = "SitesApi.GetSite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSiteDefaultResponse>("/GetSite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites) Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSiteTypesDefaultResponse</returns>
        public GetSiteTypesDefaultResponse GetSiteTypes(int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSiteTypesDefaultResponse> localVarResponse = GetSiteTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites) Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSiteTypesDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSiteTypesDefaultResponse> GetSiteTypesWithHttpInfo(int operationIndex = 0)
        {
            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SitesApi.GetSiteTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSiteTypesDefaultResponse>("/GetSiteTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites) Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSiteTypesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSiteTypesDefaultResponse> GetSiteTypesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSiteTypesDefaultResponse> localVarResponse = await GetSiteTypesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of site types for use with @see(GetSites) Return back a list of site types for use with @see(GetSites)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSiteTypesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSiteTypesDefaultResponse>> GetSiteTypesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SitesApi.GetSiteTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSiteTypesDefaultResponse>("/GetSiteTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSitesDefaultResponse</returns>
        public GetSitesDefaultResponse GetSites(GetSitesRequest getSitesRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSitesDefaultResponse> localVarResponse = GetSitesWithHttpInfo(getSitesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSitesDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSitesDefaultResponse> GetSitesWithHttpInfo(GetSitesRequest getSitesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSitesRequest' is set
            if (getSitesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSitesRequest' when calling SitesApi->GetSites");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSitesRequest;

            localVarRequestOptions.Operation = "SitesApi.GetSites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSitesDefaultResponse>("/GetSites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSitesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSitesDefaultResponse> GetSitesAsync(GetSitesRequest getSitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSitesDefaultResponse> localVarResponse = await GetSitesWithHttpInfoAsync(getSitesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSitesRequest">Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSitesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSitesDefaultResponse>> GetSitesWithHttpInfoAsync(GetSitesRequest getSitesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSitesRequest' is set
            if (getSitesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSitesRequest' when calling SitesApi->GetSites");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSitesRequest;

            localVarRequestOptions.Operation = "SitesApi.GetSites";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSitesDefaultResponse>("/GetSites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSites", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
