/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a login into the system
        /// </summary>
        /// <remarks>
        /// Add a login into the system
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLoginDefaultResponse</returns>
        AddLoginDefaultResponse AddLogin(AddLoginRequest addLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Add a login into the system
        /// </summary>
        /// <remarks>
        /// Add a login into the system
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLoginDefaultResponse</returns>
        ApiResponse<AddLoginDefaultResponse> AddLoginWithHttpInfo(AddLoginRequest addLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Flag a login as disabled
        /// </summary>
        /// <remarks>
        /// Flag a login as disabled
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse DisableLogin(DisableLoginRequest disableLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Flag a login as disabled
        /// </summary>
        /// <remarks>
        /// Flag a login as disabled
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> DisableLoginWithHttpInfo(DisableLoginRequest disableLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <remarks>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse EnableLogin(EnableLoginRequest enableLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <remarks>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> EnableLoginWithHttpInfo(EnableLoginRequest enableLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back info on the current login
        /// </summary>
        /// <remarks>
        /// Returns back info on the current login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentLoginDefaultResponse</returns>
        GetCurrentLoginDefaultResponse GetCurrentLogin(int operationIndex = 0);

        /// <summary>
        /// Returns back info on the current login
        /// </summary>
        /// <remarks>
        /// Returns back info on the current login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentLoginDefaultResponse</returns>
        ApiResponse<GetCurrentLoginDefaultResponse> GetCurrentLoginWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Return back info on a single login
        /// </summary>
        /// <remarks>
        /// Return back info on a single login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentLoginDefaultResponse</returns>
        GetCurrentLoginDefaultResponse GetLogin(GetLoginRequest getLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Return back info on a single login
        /// </summary>
        /// <remarks>
        /// Return back info on a single login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentLoginDefaultResponse</returns>
        ApiResponse<GetCurrentLoginDefaultResponse> GetLoginWithHttpInfo(GetLoginRequest getLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <remarks>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginsDefaultResponse</returns>
        GetLoginsDefaultResponse GetLogins(GetLoginsRequest getLoginsRequest, int operationIndex = 0);

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <remarks>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginsDefaultResponse</returns>
        ApiResponse<GetLoginsDefaultResponse> GetLoginsWithHttpInfo(GetLoginsRequest getLoginsRequest, int operationIndex = 0);
        /// <summary>
        /// Renames a login
        /// </summary>
        /// <remarks>
        /// Renames a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse RenameLogin(RenameLoginRequest renameLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Renames a login
        /// </summary>
        /// <remarks>
        /// Renames a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> RenameLoginWithHttpInfo(RenameLoginRequest renameLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Update a login
        /// </summary>
        /// <remarks>
        /// Update a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse UpdateLogin(AddLoginRequest addLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Update a login
        /// </summary>
        /// <remarks>
        /// Update a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> UpdateLoginWithHttpInfo(AddLoginRequest addLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Updates pieces of a login
        /// </summary>
        /// <remarks>
        /// Updates pieces of a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse UpdateLoginEx(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0);

        /// <summary>
        /// Updates pieces of a login
        /// </summary>
        /// <remarks>
        /// Updates pieces of a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> UpdateLoginExWithHttpInfo(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a login into the system
        /// </summary>
        /// <remarks>
        /// Add a login into the system
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<AddLoginDefaultResponse> AddLoginAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a login into the system
        /// </summary>
        /// <remarks>
        /// Add a login into the system
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddLoginDefaultResponse>> AddLoginWithHttpInfoAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Flag a login as disabled
        /// </summary>
        /// <remarks>
        /// Flag a login as disabled
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> DisableLoginAsync(DisableLoginRequest disableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Flag a login as disabled
        /// </summary>
        /// <remarks>
        /// Flag a login as disabled
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> DisableLoginWithHttpInfoAsync(DisableLoginRequest disableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <remarks>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> EnableLoginAsync(EnableLoginRequest enableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <remarks>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> EnableLoginWithHttpInfoAsync(EnableLoginRequest enableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back info on the current login
        /// </summary>
        /// <remarks>
        /// Returns back info on the current login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCurrentLoginDefaultResponse> GetCurrentLoginAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back info on the current login
        /// </summary>
        /// <remarks>
        /// Returns back info on the current login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentLoginDefaultResponse>> GetCurrentLoginWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back info on a single login
        /// </summary>
        /// <remarks>
        /// Return back info on a single login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCurrentLoginDefaultResponse> GetLoginAsync(GetLoginRequest getLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back info on a single login
        /// </summary>
        /// <remarks>
        /// Return back info on a single login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentLoginDefaultResponse>> GetLoginWithHttpInfoAsync(GetLoginRequest getLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <remarks>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetLoginsDefaultResponse> GetLoginsAsync(GetLoginsRequest getLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <remarks>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLoginsDefaultResponse>> GetLoginsWithHttpInfoAsync(GetLoginsRequest getLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Renames a login
        /// </summary>
        /// <remarks>
        /// Renames a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> RenameLoginAsync(RenameLoginRequest renameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Renames a login
        /// </summary>
        /// <remarks>
        /// Renames a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> RenameLoginWithHttpInfoAsync(RenameLoginRequest renameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a login
        /// </summary>
        /// <remarks>
        /// Update a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateLoginAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a login
        /// </summary>
        /// <remarks>
        /// Update a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> UpdateLoginWithHttpInfoAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates pieces of a login
        /// </summary>
        /// <remarks>
        /// Updates pieces of a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateLoginExAsync(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates pieces of a login
        /// </summary>
        /// <remarks>
        /// Updates pieces of a login
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> UpdateLoginExWithHttpInfoAsync(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoginsApi : ILoginsApiSync, ILoginsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoginsApi : ILoginsApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoginsApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoginsApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoginsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LoginsApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a login into the system Add a login into the system
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLoginDefaultResponse</returns>
        public AddLoginDefaultResponse AddLogin(AddLoginRequest addLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<AddLoginDefaultResponse> localVarResponse = AddLoginWithHttpInfo(addLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a login into the system Add a login into the system
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLoginDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<AddLoginDefaultResponse> AddLoginWithHttpInfo(AddLoginRequest addLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addLoginRequest' is set
            if (addLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addLoginRequest' when calling LoginsApi->AddLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.AddLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddLoginDefaultResponse>("/AddLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a login into the system Add a login into the system
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddLoginDefaultResponse> AddLoginAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<AddLoginDefaultResponse> localVarResponse = await AddLoginWithHttpInfoAsync(addLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a login into the system Add a login into the system
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Add a login into the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<AddLoginDefaultResponse>> AddLoginWithHttpInfoAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addLoginRequest' is set
            if (addLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addLoginRequest' when calling LoginsApi->AddLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.AddLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddLoginDefaultResponse>("/AddLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag a login as disabled Flag a login as disabled
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse DisableLogin(DisableLoginRequest disableLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = DisableLoginWithHttpInfo(disableLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag a login as disabled Flag a login as disabled
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> DisableLoginWithHttpInfo(DisableLoginRequest disableLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'disableLoginRequest' is set
            if (disableLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'disableLoginRequest' when calling LoginsApi->DisableLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = disableLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.DisableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/DisableLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag a login as disabled Flag a login as disabled
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> DisableLoginAsync(DisableLoginRequest disableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await DisableLoginWithHttpInfoAsync(disableLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag a login as disabled Flag a login as disabled
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableLoginRequest">Flag a login as disabled</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> DisableLoginWithHttpInfoAsync(DisableLoginRequest disableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'disableLoginRequest' is set
            if (disableLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'disableLoginRequest' when calling LoginsApi->DisableLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = disableLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.DisableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/DisableLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse EnableLogin(EnableLoginRequest enableLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = EnableLoginWithHttpInfo(enableLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> EnableLoginWithHttpInfo(EnableLoginRequest enableLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'enableLoginRequest' is set
            if (enableLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'enableLoginRequest' when calling LoginsApi->EnableLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enableLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.EnableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/EnableLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> EnableLoginAsync(EnableLoginRequest enableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await EnableLoginWithHttpInfoAsync(enableLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableLoginRequest">Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> EnableLoginWithHttpInfoAsync(EnableLoginRequest enableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'enableLoginRequest' is set
            if (enableLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'enableLoginRequest' when calling LoginsApi->EnableLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enableLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.EnableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/EnableLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back info on the current login Returns back info on the current login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentLoginDefaultResponse</returns>
        public GetCurrentLoginDefaultResponse GetCurrentLogin(int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> localVarResponse = GetCurrentLoginWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back info on the current login Returns back info on the current login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentLoginDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> GetCurrentLoginWithHttpInfo(int operationIndex = 0)
        {
            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LoginsApi.GetCurrentLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentLoginDefaultResponse>("/GetCurrentLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back info on the current login Returns back info on the current login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentLoginDefaultResponse> GetCurrentLoginAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> localVarResponse = await GetCurrentLoginWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back info on the current login Returns back info on the current login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse>> GetCurrentLoginWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LoginsApi.GetCurrentLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentLoginDefaultResponse>("/GetCurrentLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back info on a single login Return back info on a single login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentLoginDefaultResponse</returns>
        public GetCurrentLoginDefaultResponse GetLogin(GetLoginRequest getLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> localVarResponse = GetLoginWithHttpInfo(getLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back info on a single login Return back info on a single login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentLoginDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> GetLoginWithHttpInfo(GetLoginRequest getLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getLoginRequest' is set
            if (getLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getLoginRequest' when calling LoginsApi->GetLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.GetLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentLoginDefaultResponse>("/GetLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back info on a single login Return back info on a single login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentLoginDefaultResponse> GetLoginAsync(GetLoginRequest getLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse> localVarResponse = await GetLoginWithHttpInfoAsync(getLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back info on a single login Return back info on a single login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginRequest">Return back info on a single login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetCurrentLoginDefaultResponse>> GetLoginWithHttpInfoAsync(GetLoginRequest getLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getLoginRequest' is set
            if (getLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getLoginRequest' when calling LoginsApi->GetLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.GetLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentLoginDefaultResponse>("/GetLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginsDefaultResponse</returns>
        public GetLoginsDefaultResponse GetLogins(GetLoginsRequest getLoginsRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetLoginsDefaultResponse> localVarResponse = GetLoginsWithHttpInfo(getLoginsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginsDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetLoginsDefaultResponse> GetLoginsWithHttpInfo(GetLoginsRequest getLoginsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getLoginsRequest' is set
            if (getLoginsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getLoginsRequest' when calling LoginsApi->GetLogins");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginsRequest;

            localVarRequestOptions.Operation = "LoginsApi.GetLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetLoginsDefaultResponse>("/GetLogins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetLoginsDefaultResponse> GetLoginsAsync(GetLoginsRequest getLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetLoginsDefaultResponse> localVarResponse = await GetLoginsWithHttpInfoAsync(getLoginsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginsRequest">Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetLoginsDefaultResponse>> GetLoginsWithHttpInfoAsync(GetLoginsRequest getLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getLoginsRequest' is set
            if (getLoginsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getLoginsRequest' when calling LoginsApi->GetLogins");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginsRequest;

            localVarRequestOptions.Operation = "LoginsApi.GetLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetLoginsDefaultResponse>("/GetLogins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renames a login Renames a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse RenameLogin(RenameLoginRequest renameLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = RenameLoginWithHttpInfo(renameLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renames a login Renames a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> RenameLoginWithHttpInfo(RenameLoginRequest renameLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'renameLoginRequest' is set
            if (renameLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'renameLoginRequest' when calling LoginsApi->RenameLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.RenameLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/RenameLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Renames a login Renames a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> RenameLoginAsync(RenameLoginRequest renameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await RenameLoginWithHttpInfoAsync(renameLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renames a login Renames a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameLoginRequest">Renames a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> RenameLoginWithHttpInfoAsync(RenameLoginRequest renameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'renameLoginRequest' is set
            if (renameLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'renameLoginRequest' when calling LoginsApi->RenameLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.RenameLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/RenameLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a login Update a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse UpdateLogin(AddLoginRequest addLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = UpdateLoginWithHttpInfo(addLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a login Update a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> UpdateLoginWithHttpInfo(AddLoginRequest addLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addLoginRequest' is set
            if (addLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addLoginRequest' when calling LoginsApi->UpdateLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.UpdateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/UpdateLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a login Update a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateLoginAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await UpdateLoginWithHttpInfoAsync(addLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a login Update a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginRequest">Update a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> UpdateLoginWithHttpInfoAsync(AddLoginRequest addLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addLoginRequest' is set
            if (addLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addLoginRequest' when calling LoginsApi->UpdateLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginRequest;

            localVarRequestOptions.Operation = "LoginsApi.UpdateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/UpdateLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates pieces of a login Updates pieces of a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse UpdateLoginEx(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = UpdateLoginExWithHttpInfo(updateLoginExRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates pieces of a login Updates pieces of a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> UpdateLoginExWithHttpInfo(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateLoginExRequest' is set
            if (updateLoginExRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'updateLoginExRequest' when calling LoginsApi->UpdateLoginEx");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLoginExRequest;

            localVarRequestOptions.Operation = "LoginsApi.UpdateLoginEx";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/UpdateLoginEx", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoginEx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates pieces of a login Updates pieces of a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateLoginExAsync(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await UpdateLoginExWithHttpInfoAsync(updateLoginExRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates pieces of a login Updates pieces of a login
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateLoginExRequest">Updates pieces of a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> UpdateLoginExWithHttpInfoAsync(UpdateLoginExRequest updateLoginExRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateLoginExRequest' is set
            if (updateLoginExRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'updateLoginExRequest' when calling LoginsApi->UpdateLoginEx");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateLoginExRequest;

            localVarRequestOptions.Operation = "LoginsApi.UpdateLoginEx";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/UpdateLoginEx", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoginEx", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
