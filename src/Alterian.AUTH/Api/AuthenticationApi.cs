/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <remarks>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationLoginDefaultResponse</returns>
        ApplicationLoginDefaultResponse ApplicationLogin(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0);

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <remarks>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationLoginDefaultResponse</returns>
        ApiResponse<ApplicationLoginDefaultResponse> ApplicationLoginWithHttpInfo(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        FormsAuthenticationDefaultResponse FormsAuthentication(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0);

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        ApiResponse<FormsAuthenticationDefaultResponse> FormsAuthenticationWithHttpInfo(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentityUrlDefaultResponse</returns>
        GetIdentityUrlDefaultResponse GetIdentityUrl(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentityUrlDefaultResponse</returns>
        ApiResponse<GetIdentityUrlDefaultResponse> GetIdentityUrlWithHttpInfo(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <remarks>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationLoginDefaultResponse</returns>
        ApplicationLoginDefaultResponse GetSiteDetails(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <remarks>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationLoginDefaultResponse</returns>
        ApiResponse<ApplicationLoginDefaultResponse> GetSiteDetailsWithHttpInfo(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0);
        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse Logout(int operationIndex = 0);

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> LogoutWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <remarks>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        FormsAuthenticationDefaultResponse NTLMAuthentication(int operationIndex = 0);

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <remarks>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        ApiResponse<FormsAuthenticationDefaultResponse> NTLMAuthenticationWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <remarks>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object OpenIdAuthentication(string? code = default(string?), string? state = default(string?), int operationIndex = 0);

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <remarks>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OpenIdAuthenticationWithHttpInfo(string? code = default(string?), string? state = default(string?), int operationIndex = 0);
        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <remarks>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        FormsAuthenticationDefaultResponse SAMLAuthentication(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0);

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <remarks>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        ApiResponse<FormsAuthenticationDefaultResponse> SAMLAuthenticationWithHttpInfo(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <remarks>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<ApplicationLoginDefaultResponse> ApplicationLoginAsync(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <remarks>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationLoginDefaultResponse>> ApplicationLoginWithHttpInfoAsync(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> FormsAuthenticationAsync(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormsAuthenticationDefaultResponse>> FormsAuthenticationWithHttpInfoAsync(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentityUrlDefaultResponse</returns>
        System.Threading.Tasks.Task<GetIdentityUrlDefaultResponse> GetIdentityUrlAsync(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentityUrlDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIdentityUrlDefaultResponse>> GetIdentityUrlWithHttpInfoAsync(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <remarks>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<ApplicationLoginDefaultResponse> GetSiteDetailsAsync(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <remarks>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationLoginDefaultResponse>> GetSiteDetailsWithHttpInfoAsync(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> LogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <remarks>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> LogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <remarks>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> NTLMAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <remarks>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormsAuthenticationDefaultResponse>> NTLMAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <remarks>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OpenIdAuthenticationAsync(string? code = default(string?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <remarks>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpenIdAuthenticationWithHttpInfoAsync(string? code = default(string?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <remarks>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> SAMLAuthenticationAsync(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <remarks>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FormsAuthenticationDefaultResponse>> SAMLAuthenticationWithHttpInfoAsync(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot; this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationLoginDefaultResponse</returns>
        public ApplicationLoginDefaultResponse ApplicationLogin(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> localVarResponse = ApplicationLoginWithHttpInfo(applicationLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot; this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationLoginDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> ApplicationLoginWithHttpInfo(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'applicationLoginRequest' is set
            if (applicationLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'applicationLoginRequest' when calling AuthenticationApi->ApplicationLogin");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applicationLoginRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.ApplicationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationLoginDefaultResponse>("/ApplicationLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot; this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationLoginDefaultResponse> ApplicationLoginAsync(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> localVarResponse = await ApplicationLoginWithHttpInfoAsync(applicationLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// this method requests the auth server give you a token for a particular \&quot;application\&quot; this method requests the auth server give you a token for a particular \&quot;application\&quot;
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationLoginRequest">this method requests the auth server give you a token for a particular \&quot;application\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse>> ApplicationLoginWithHttpInfoAsync(ApplicationLoginRequest applicationLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'applicationLoginRequest' is set
            if (applicationLoginRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'applicationLoginRequest' when calling AuthenticationApi->ApplicationLogin");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = applicationLoginRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.ApplicationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationLoginDefaultResponse>("/ApplicationLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        public FormsAuthenticationDefaultResponse FormsAuthentication(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = FormsAuthenticationWithHttpInfo(formsAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> FormsAuthenticationWithHttpInfo(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'formsAuthenticationRequest' is set
            if (formsAuthenticationRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'formsAuthenticationRequest' when calling AuthenticationApi->FormsAuthentication");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = formsAuthenticationRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.FormsAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FormsAuthenticationDefaultResponse>("/FormsAuthentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormsAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> FormsAuthenticationAsync(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = await FormsAuthenticationWithHttpInfoAsync(formsAuthenticationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="formsAuthenticationRequest">Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse>> FormsAuthenticationWithHttpInfoAsync(FormsAuthenticationRequest formsAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'formsAuthenticationRequest' is set
            if (formsAuthenticationRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'formsAuthenticationRequest' when calling AuthenticationApi->FormsAuthentication");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = formsAuthenticationRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.FormsAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FormsAuthenticationDefaultResponse>("/FormsAuthentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormsAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentityUrlDefaultResponse</returns>
        public GetIdentityUrlDefaultResponse GetIdentityUrl(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetIdentityUrlDefaultResponse> localVarResponse = GetIdentityUrlWithHttpInfo(getIdentityUrlRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentityUrlDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetIdentityUrlDefaultResponse> GetIdentityUrlWithHttpInfo(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getIdentityUrlRequest' is set
            if (getIdentityUrlRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getIdentityUrlRequest' when calling AuthenticationApi->GetIdentityUrl");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentityUrlRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.GetIdentityUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetIdentityUrlDefaultResponse>("/GetIdentityUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentityUrlDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetIdentityUrlDefaultResponse> GetIdentityUrlAsync(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetIdentityUrlDefaultResponse> localVarResponse = await GetIdentityUrlWithHttpInfoAsync(getIdentityUrlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIdentityUrlRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentityUrlDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetIdentityUrlDefaultResponse>> GetIdentityUrlWithHttpInfoAsync(GetIdentityUrlRequest getIdentityUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getIdentityUrlRequest' is set
            if (getIdentityUrlRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getIdentityUrlRequest' when calling AuthenticationApi->GetIdentityUrl");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIdentityUrlRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.GetIdentityUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetIdentityUrlDefaultResponse>("/GetIdentityUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIdentityUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApplicationLoginDefaultResponse</returns>
        public ApplicationLoginDefaultResponse GetSiteDetails(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> localVarResponse = GetSiteDetailsWithHttpInfo(getSiteDetailsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApplicationLoginDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> GetSiteDetailsWithHttpInfo(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSiteDetailsRequest' is set
            if (getSiteDetailsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSiteDetailsRequest' when calling AuthenticationApi->GetSiteDetails");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSiteDetailsRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.GetSiteDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApplicationLoginDefaultResponse>("/GetSiteDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApplicationLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationLoginDefaultResponse> GetSiteDetailsAsync(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse> localVarResponse = await GetSiteDetailsWithHttpInfoAsync(getSiteDetailsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSiteDetailsRequest">Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApplicationLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<ApplicationLoginDefaultResponse>> GetSiteDetailsWithHttpInfoAsync(GetSiteDetailsRequest getSiteDetailsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSiteDetailsRequest' is set
            if (getSiteDetailsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSiteDetailsRequest' when calling AuthenticationApi->GetSiteDetails");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSiteDetailsRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.GetSiteDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApplicationLoginDefaultResponse>("/GetSiteDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSiteDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin) Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse Logout(int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = LogoutWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin) Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> LogoutWithHttpInfo(int operationIndex = 0)
        {
            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/Logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin) Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> LogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await LogoutWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin) Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> LogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/Logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function. If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        public FormsAuthenticationDefaultResponse NTLMAuthentication(int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = NTLMAuthenticationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function. If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> NTLMAuthenticationWithHttpInfo(int operationIndex = 0)
        {
            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.NTLMAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FormsAuthenticationDefaultResponse>("/NTLMAuthentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NTLMAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function. If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> NTLMAuthenticationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = await NTLMAuthenticationWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function. If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse>> NTLMAuthenticationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.NTLMAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FormsAuthenticationDefaultResponse>("/NTLMAuthentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NTLMAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation. Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object OpenIdAuthentication(string? code = default(string?), string? state = default(string?), int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<Object> localVarResponse = OpenIdAuthenticationWithHttpInfo(code, state);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation. Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Alterian.AUTH.Client.ApiResponse<Object> OpenIdAuthenticationWithHttpInfo(string? code = default(string?), string? state = default(string?), int operationIndex = 0)
        {
            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.AUTH.Client.ClientUtils.ParameterToMultiMap("", "Code", code));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.AUTH.Client.ClientUtils.ParameterToMultiMap("", "State", state));
            }

            localVarRequestOptions.Operation = "AuthenticationApi.OpenIdAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/OpenIdAuthentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenIdAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation. Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OpenIdAuthenticationAsync(string? code = default(string?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<Object> localVarResponse = await OpenIdAuthenticationWithHttpInfoAsync(code, state, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation. Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<Object>> OpenIdAuthenticationWithHttpInfoAsync(string? code = default(string?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.AUTH.Client.ClientUtils.ParameterToMultiMap("", "Code", code));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.AUTH.Client.ClientUtils.ParameterToMultiMap("", "State", state));
            }

            localVarRequestOptions.Operation = "AuthenticationApi.OpenIdAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/OpenIdAuthentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenIdAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FormsAuthenticationDefaultResponse</returns>
        public FormsAuthenticationDefaultResponse SAMLAuthentication(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = SAMLAuthenticationWithHttpInfo(sAMLAuthenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FormsAuthenticationDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> SAMLAuthenticationWithHttpInfo(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'sAMLAuthenticationRequest' is set
            if (sAMLAuthenticationRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'sAMLAuthenticationRequest' when calling AuthenticationApi->SAMLAuthentication");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sAMLAuthenticationRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.SAMLAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FormsAuthenticationDefaultResponse>("/SAMLAuthentication", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SAMLAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FormsAuthenticationDefaultResponse</returns>
        public async System.Threading.Tasks.Task<FormsAuthenticationDefaultResponse> SAMLAuthenticationAsync(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse> localVarResponse = await SAMLAuthenticationWithHttpInfoAsync(sAMLAuthenticationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sAMLAuthenticationRequest">Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FormsAuthenticationDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<FormsAuthenticationDefaultResponse>> SAMLAuthenticationWithHttpInfoAsync(SAMLAuthenticationRequest sAMLAuthenticationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sAMLAuthenticationRequest' is set
            if (sAMLAuthenticationRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'sAMLAuthenticationRequest' when calling AuthenticationApi->SAMLAuthentication");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sAMLAuthenticationRequest;

            localVarRequestOptions.Operation = "AuthenticationApi.SAMLAuthentication";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FormsAuthenticationDefaultResponse>("/SAMLAuthentication", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SAMLAuthentication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
