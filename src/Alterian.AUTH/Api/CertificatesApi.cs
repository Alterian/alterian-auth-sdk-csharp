/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a certificate for use with single sign on
        /// </summary>
        /// <remarks>
        /// Adds a certificate for use with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        AddCertificateDefaultResponse AddCertificate(AddCertificateRequest addCertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Adds a certificate for use with single sign on
        /// </summary>
        /// <remarks>
        /// Adds a certificate for use with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        ApiResponse<AddCertificateDefaultResponse> AddCertificateWithHttpInfo(AddCertificateRequest addCertificateRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes the specified certificate
        /// </summary>
        /// <remarks>
        /// Deletes the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse DeleteCertificate(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes the specified certificate
        /// </summary>
        /// <remarks>
        /// Deletes the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> DeleteCertificateWithHttpInfo(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0);
        /// <summary>
        /// Gets the specified certificate
        /// </summary>
        /// <remarks>
        /// Gets the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCertificateDefaultResponse</returns>
        GetCertificateDefaultResponse GetCertificate(GetCertificateRequest getCertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Gets the specified certificate
        /// </summary>
        /// <remarks>
        /// Gets the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCertificateDefaultResponse</returns>
        ApiResponse<GetCertificateDefaultResponse> GetCertificateWithHttpInfo(GetCertificateRequest getCertificateRequest, int operationIndex = 0);
        /// <summary>
        /// Gets a list of available certificates
        /// </summary>
        /// <remarks>
        /// Gets a list of available certificates
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCertificatesDefaultResponse</returns>
        GetCertificatesDefaultResponse GetCertificates(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);

        /// <summary>
        /// Gets a list of available certificates
        /// </summary>
        /// <remarks>
        /// Gets a list of available certificates
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCertificatesDefaultResponse</returns>
        ApiResponse<GetCertificatesDefaultResponse> GetCertificatesWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);
        /// <summary>
        /// Updates information associated with a certificate
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse UpdateCertificate(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Updates information associated with a certificate
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> UpdateCertificateWithHttpInfo(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a certificate for use with single sign on
        /// </summary>
        /// <remarks>
        /// Adds a certificate for use with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddCertificateAsync(AddCertificateRequest addCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a certificate for use with single sign on
        /// </summary>
        /// <remarks>
        /// Adds a certificate for use with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddCertificateDefaultResponse>> AddCertificateWithHttpInfoAsync(AddCertificateRequest addCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes the specified certificate
        /// </summary>
        /// <remarks>
        /// Deletes the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteCertificateAsync(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes the specified certificate
        /// </summary>
        /// <remarks>
        /// Deletes the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> DeleteCertificateWithHttpInfoAsync(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the specified certificate
        /// </summary>
        /// <remarks>
        /// Gets the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCertificateDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCertificateDefaultResponse> GetCertificateAsync(GetCertificateRequest getCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the specified certificate
        /// </summary>
        /// <remarks>
        /// Gets the specified certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCertificateDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCertificateDefaultResponse>> GetCertificateWithHttpInfoAsync(GetCertificateRequest getCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of available certificates
        /// </summary>
        /// <remarks>
        /// Gets a list of available certificates
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCertificatesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCertificatesDefaultResponse> GetCertificatesAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of available certificates
        /// </summary>
        /// <remarks>
        /// Gets a list of available certificates
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCertificatesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCertificatesDefaultResponse>> GetCertificatesWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates information associated with a certificate
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates information associated with a certificate
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> UpdateCertificateWithHttpInfoAsync(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificatesApi : ICertificatesApiSync, ICertificatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CertificatesApi : ICertificatesApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificatesApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CertificatesApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CertificatesApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a certificate for use with single sign on Adds a certificate for use with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        public AddCertificateDefaultResponse AddCertificate(AddCertificateRequest addCertificateRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = AddCertificateWithHttpInfo(addCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a certificate for use with single sign on Adds a certificate for use with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> AddCertificateWithHttpInfo(AddCertificateRequest addCertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addCertificateRequest' is set
            if (addCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addCertificateRequest' when calling CertificatesApi->AddCertificate");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.AddCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddCertificateDefaultResponse>("/AddCertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a certificate for use with single sign on Adds a certificate for use with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddCertificateAsync(AddCertificateRequest addCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = await AddCertificateWithHttpInfoAsync(addCertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a certificate for use with single sign on Adds a certificate for use with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addCertificateRequest">Adds a certificate for use with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse>> AddCertificateWithHttpInfoAsync(AddCertificateRequest addCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addCertificateRequest' is set
            if (addCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addCertificateRequest' when calling CertificatesApi->AddCertificate");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.AddCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddCertificateDefaultResponse>("/AddCertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the specified certificate Deletes the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse DeleteCertificate(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = DeleteCertificateWithHttpInfo(deleteCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified certificate Deletes the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> DeleteCertificateWithHttpInfo(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteCertificateRequest' is set
            if (deleteCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteCertificateRequest' when calling CertificatesApi->DeleteCertificate");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.DeleteCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/DeleteCertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the specified certificate Deletes the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteCertificateAsync(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await DeleteCertificateWithHttpInfoAsync(deleteCertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified certificate Deletes the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteCertificateRequest">Deletes the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> DeleteCertificateWithHttpInfoAsync(DeleteCertificateRequest deleteCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteCertificateRequest' is set
            if (deleteCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteCertificateRequest' when calling CertificatesApi->DeleteCertificate");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.DeleteCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/DeleteCertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the specified certificate Gets the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCertificateDefaultResponse</returns>
        public GetCertificateDefaultResponse GetCertificate(GetCertificateRequest getCertificateRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetCertificateDefaultResponse> localVarResponse = GetCertificateWithHttpInfo(getCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified certificate Gets the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCertificateDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetCertificateDefaultResponse> GetCertificateWithHttpInfo(GetCertificateRequest getCertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCertificateRequest' is set
            if (getCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificateRequest' when calling CertificatesApi->GetCertificate");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.GetCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCertificateDefaultResponse>("/GetCertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the specified certificate Gets the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCertificateDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCertificateDefaultResponse> GetCertificateAsync(GetCertificateRequest getCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetCertificateDefaultResponse> localVarResponse = await GetCertificateWithHttpInfoAsync(getCertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the specified certificate Gets the specified certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificateRequest">Gets the specified certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCertificateDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetCertificateDefaultResponse>> GetCertificateWithHttpInfoAsync(GetCertificateRequest getCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCertificateRequest' is set
            if (getCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificateRequest' when calling CertificatesApi->GetCertificate");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.GetCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCertificateDefaultResponse>("/GetCertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available certificates Gets a list of available certificates
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCertificatesDefaultResponse</returns>
        public GetCertificatesDefaultResponse GetCertificates(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetCertificatesDefaultResponse> localVarResponse = GetCertificatesWithHttpInfo(getCertificatesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of available certificates Gets a list of available certificates
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCertificatesDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetCertificatesDefaultResponse> GetCertificatesWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling CertificatesApi->GetCertificates");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "CertificatesApi.GetCertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCertificatesDefaultResponse>("/GetCertificates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available certificates Gets a list of available certificates
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCertificatesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCertificatesDefaultResponse> GetCertificatesAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetCertificatesDefaultResponse> localVarResponse = await GetCertificatesWithHttpInfoAsync(getCertificatesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of available certificates Gets a list of available certificates
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available certificates</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCertificatesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetCertificatesDefaultResponse>> GetCertificatesWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling CertificatesApi->GetCertificates");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "CertificatesApi.GetCertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCertificatesDefaultResponse>("/GetCertificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates information associated with a certificate Updates information associated with a certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse UpdateCertificate(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = UpdateCertificateWithHttpInfo(updateCertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates information associated with a certificate Updates information associated with a certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> UpdateCertificateWithHttpInfo(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateCertificateRequest' is set
            if (updateCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'updateCertificateRequest' when calling CertificatesApi->UpdateCertificate");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.UpdateCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/UpdateCertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates information associated with a certificate Updates information associated with a certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await UpdateCertificateWithHttpInfoAsync(updateCertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates information associated with a certificate Updates information associated with a certificate
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCertificateRequest">Updates information associated with a certificate</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> UpdateCertificateWithHttpInfoAsync(UpdateCertificateRequest updateCertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateCertificateRequest' is set
            if (updateCertificateRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'updateCertificateRequest' when calling CertificatesApi->UpdateCertificate");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCertificateRequest;

            localVarRequestOptions.Operation = "CertificatesApi.UpdateCertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/UpdateCertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
