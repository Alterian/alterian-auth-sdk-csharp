/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        AddCertificateDefaultResponse AddIssuer(AddIssuerRequest addIssuerRequest, int operationIndex = 0);

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        ApiResponse<AddCertificateDefaultResponse> AddIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse DeleteIssuer(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> DeleteIssuerWithHttpInfo(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuerDefaultResponse</returns>
        GetIssuerDefaultResponse GetIssuer(GetIssuerRequest getIssuerRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuerDefaultResponse</returns>
        ApiResponse<GetIssuerDefaultResponse> GetIssuerWithHttpInfo(GetIssuerRequest getIssuerRequest, int operationIndex = 0);
        /// <summary>
        /// Gets a list of available issuers
        /// </summary>
        /// <remarks>
        /// Gets a list of available issuers
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuersDefaultResponse</returns>
        GetIssuersDefaultResponse GetIssuers(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);

        /// <summary>
        /// Gets a list of available issuers
        /// </summary>
        /// <remarks>
        /// Gets a list of available issuers
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuersDefaultResponse</returns>
        ApiResponse<GetIssuersDefaultResponse> GetIssuersWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0);
        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate&#39;s issuer
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse UpdateIssuer(AddIssuerRequest addIssuerRequest, int operationIndex = 0);

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate&#39;s issuer
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> UpdateIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddIssuerAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Adds an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddCertificateDefaultResponse>> AddIssuerWithHttpInfoAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteIssuerAsync(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> DeleteIssuerWithHttpInfoAsync(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuerDefaultResponse</returns>
        System.Threading.Tasks.Task<GetIssuerDefaultResponse> GetIssuerAsync(GetIssuerRequest getIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <remarks>
        /// Retrieves an Issuer for a Certificate used with single sign on
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuerDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIssuerDefaultResponse>> GetIssuerWithHttpInfoAsync(GetIssuerRequest getIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of available issuers
        /// </summary>
        /// <remarks>
        /// Gets a list of available issuers
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuersDefaultResponse</returns>
        System.Threading.Tasks.Task<GetIssuersDefaultResponse> GetIssuersAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of available issuers
        /// </summary>
        /// <remarks>
        /// Gets a list of available issuers
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIssuersDefaultResponse>> GetIssuersWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate&#39;s issuer
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateIssuerAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <remarks>
        /// Updates information associated with a certificate&#39;s issuer
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> UpdateIssuerWithHttpInfoAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuersApi : IIssuersApiSync, IIssuersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssuersApi : IIssuersApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuersApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssuersApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssuersApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        public AddCertificateDefaultResponse AddIssuer(AddIssuerRequest addIssuerRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = AddIssuerWithHttpInfo(addIssuerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> AddIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addIssuerRequest' is set
            if (addIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addIssuerRequest' when calling IssuersApi->AddIssuer");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.AddIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddCertificateDefaultResponse>("/AddIssuer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddIssuerAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = await AddIssuerWithHttpInfoAsync(addIssuerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an Issuer for a Certificate used with single sign on Adds an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Adds an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse>> AddIssuerWithHttpInfoAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addIssuerRequest' is set
            if (addIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addIssuerRequest' when calling IssuersApi->AddIssuer");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.AddIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddCertificateDefaultResponse>("/AddIssuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse DeleteIssuer(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = DeleteIssuerWithHttpInfo(deleteIssuerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> DeleteIssuerWithHttpInfo(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteIssuerRequest' is set
            if (deleteIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteIssuerRequest' when calling IssuersApi->DeleteIssuer");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.DeleteIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/DeleteIssuer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteIssuerAsync(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await DeleteIssuerWithHttpInfoAsync(deleteIssuerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an @see(Issuer) for a Certificate used with single sign on Deletes an @see(Issuer) for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteIssuerRequest">Deletes an @see(Issuer) for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> DeleteIssuerWithHttpInfoAsync(DeleteIssuerRequest deleteIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteIssuerRequest' is set
            if (deleteIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteIssuerRequest' when calling IssuersApi->DeleteIssuer");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.DeleteIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/DeleteIssuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuerDefaultResponse</returns>
        public GetIssuerDefaultResponse GetIssuer(GetIssuerRequest getIssuerRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetIssuerDefaultResponse> localVarResponse = GetIssuerWithHttpInfo(getIssuerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuerDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetIssuerDefaultResponse> GetIssuerWithHttpInfo(GetIssuerRequest getIssuerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getIssuerRequest' is set
            if (getIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getIssuerRequest' when calling IssuersApi->GetIssuer");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.GetIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetIssuerDefaultResponse>("/GetIssuer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuerDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetIssuerDefaultResponse> GetIssuerAsync(GetIssuerRequest getIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetIssuerDefaultResponse> localVarResponse = await GetIssuerWithHttpInfoAsync(getIssuerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Issuer for a Certificate used with single sign on Retrieves an Issuer for a Certificate used with single sign on
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getIssuerRequest">Retrieves an Issuer for a Certificate used with single sign on</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuerDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetIssuerDefaultResponse>> GetIssuerWithHttpInfoAsync(GetIssuerRequest getIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getIssuerRequest' is set
            if (getIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getIssuerRequest' when calling IssuersApi->GetIssuer");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.GetIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetIssuerDefaultResponse>("/GetIssuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available issuers Gets a list of available issuers
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuersDefaultResponse</returns>
        public GetIssuersDefaultResponse GetIssuers(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetIssuersDefaultResponse> localVarResponse = GetIssuersWithHttpInfo(getCertificatesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of available issuers Gets a list of available issuers
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuersDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetIssuersDefaultResponse> GetIssuersWithHttpInfo(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling IssuersApi->GetIssuers");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "IssuersApi.GetIssuers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetIssuersDefaultResponse>("/GetIssuers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of available issuers Gets a list of available issuers
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetIssuersDefaultResponse> GetIssuersAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetIssuersDefaultResponse> localVarResponse = await GetIssuersWithHttpInfoAsync(getCertificatesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of available issuers Gets a list of available issuers
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCertificatesRequest">Gets a list of available issuers</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetIssuersDefaultResponse>> GetIssuersWithHttpInfoAsync(GetCertificatesRequest getCertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCertificatesRequest' is set
            if (getCertificatesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getCertificatesRequest' when calling IssuersApi->GetIssuers");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCertificatesRequest;

            localVarRequestOptions.Operation = "IssuersApi.GetIssuers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetIssuersDefaultResponse>("/GetIssuers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse UpdateIssuer(AddIssuerRequest addIssuerRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = UpdateIssuerWithHttpInfo(addIssuerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> UpdateIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addIssuerRequest' is set
            if (addIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addIssuerRequest' when calling IssuersApi->UpdateIssuer");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.UpdateIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/UpdateIssuer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateIssuerAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await UpdateIssuerWithHttpInfoAsync(addIssuerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates information associated with a certificate&#39;s issuer Updates information associated with a certificate&#39;s issuer
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addIssuerRequest">Updates information associated with a certificate&#39;s issuer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> UpdateIssuerWithHttpInfoAsync(AddIssuerRequest addIssuerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addIssuerRequest' is set
            if (addIssuerRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addIssuerRequest' when calling IssuersApi->UpdateIssuer");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addIssuerRequest;

            localVarRequestOptions.Operation = "IssuersApi.UpdateIssuer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/UpdateIssuer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateIssuer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
