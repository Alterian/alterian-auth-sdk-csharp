/*
 * Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.AUTH.Client;
using Alterian.AUTH.Model;

namespace Alterian.AUTH.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <remarks>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        AddCertificateDefaultResponse AddSetting(AddSettingRequest addSettingRequest, int operationIndex = 0);

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <remarks>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        ApiResponse<AddCertificateDefaultResponse> AddSettingWithHttpInfo(AddSettingRequest addSettingRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a setting
        /// </summary>
        /// <remarks>
        /// Deletes a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse DeleteSetting(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a setting
        /// </summary>
        /// <remarks>
        /// Deletes a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> DeleteSettingWithHttpInfo(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0);
        /// <summary>
        /// Read a setting
        /// </summary>
        /// <remarks>
        /// Read a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingDefaultResponse</returns>
        GetSettingDefaultResponse GetSetting(GetSettingRequest getSettingRequest, int operationIndex = 0);

        /// <summary>
        /// Read a setting
        /// </summary>
        /// <remarks>
        /// Read a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingDefaultResponse</returns>
        ApiResponse<GetSettingDefaultResponse> GetSettingWithHttpInfo(GetSettingRequest getSettingRequest, int operationIndex = 0);
        /// <summary>
        /// Reads a list of settings
        /// </summary>
        /// <remarks>
        /// Reads a list of settings
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingsDefaultResponse</returns>
        GetSettingsDefaultResponse GetSettings(GetSettingsRequest getSettingsRequest, int operationIndex = 0);

        /// <summary>
        /// Reads a list of settings
        /// </summary>
        /// <remarks>
        /// Reads a list of settings
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingsDefaultResponse</returns>
        ApiResponse<GetSettingsDefaultResponse> GetSettingsWithHttpInfo(GetSettingsRequest getSettingsRequest, int operationIndex = 0);
        /// <summary>
        /// Reads settings and their values
        /// </summary>
        /// <remarks>
        /// Reads settings and their values
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingsDefaultResponse</returns>
        GetSettingsDefaultResponse GetSettingsValues(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0);

        /// <summary>
        /// Reads settings and their values
        /// </summary>
        /// <remarks>
        /// Reads settings and their values
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingsDefaultResponse</returns>
        ApiResponse<GetSettingsDefaultResponse> GetSettingsValuesWithHttpInfo(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0);
        /// <summary>
        /// Updates the EM service URL
        /// </summary>
        /// <remarks>
        /// Updates the EM service URL
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse SetEMServiceURL(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0);

        /// <summary>
        /// Updates the EM service URL
        /// </summary>
        /// <remarks>
        /// Updates the EM service URL
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> SetEMServiceURLWithHttpInfo(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0);
        /// <summary>
        /// Updates a setting
        /// </summary>
        /// <remarks>
        /// Updates a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        LogoutDefaultResponse UpdateSetting(AddSettingRequest addSettingRequest, int operationIndex = 0);

        /// <summary>
        /// Updates a setting
        /// </summary>
        /// <remarks>
        /// Updates a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        ApiResponse<LogoutDefaultResponse> UpdateSettingWithHttpInfo(AddSettingRequest addSettingRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <remarks>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddSettingAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <remarks>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddCertificateDefaultResponse>> AddSettingWithHttpInfoAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a setting
        /// </summary>
        /// <remarks>
        /// Deletes a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteSettingAsync(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a setting
        /// </summary>
        /// <remarks>
        /// Deletes a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> DeleteSettingWithHttpInfoAsync(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read a setting
        /// </summary>
        /// <remarks>
        /// Read a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSettingDefaultResponse> GetSettingAsync(GetSettingRequest getSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read a setting
        /// </summary>
        /// <remarks>
        /// Read a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSettingDefaultResponse>> GetSettingWithHttpInfoAsync(GetSettingRequest getSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reads a list of settings
        /// </summary>
        /// <remarks>
        /// Reads a list of settings
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSettingsDefaultResponse> GetSettingsAsync(GetSettingsRequest getSettingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reads a list of settings
        /// </summary>
        /// <remarks>
        /// Reads a list of settings
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSettingsDefaultResponse>> GetSettingsWithHttpInfoAsync(GetSettingsRequest getSettingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reads settings and their values
        /// </summary>
        /// <remarks>
        /// Reads settings and their values
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetSettingsDefaultResponse> GetSettingsValuesAsync(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reads settings and their values
        /// </summary>
        /// <remarks>
        /// Reads settings and their values
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSettingsDefaultResponse>> GetSettingsValuesWithHttpInfoAsync(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the EM service URL
        /// </summary>
        /// <remarks>
        /// Updates the EM service URL
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> SetEMServiceURLAsync(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the EM service URL
        /// </summary>
        /// <remarks>
        /// Updates the EM service URL
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> SetEMServiceURLWithHttpInfoAsync(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a setting
        /// </summary>
        /// <remarks>
        /// Updates a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateSettingAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a setting
        /// </summary>
        /// <remarks>
        /// Updates a setting
        /// </remarks>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutDefaultResponse>> UpdateSettingWithHttpInfoAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private Alterian.AUTH.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                new Alterian.AUTH.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Alterian.AUTH.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.AUTH.Client.Configuration.MergeConfigurations(
                Alterian.AUTH.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.AUTH.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(Alterian.AUTH.Client.ISynchronousClient client, Alterian.AUTH.Client.IAsynchronousClient asyncClient, Alterian.AUTH.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.AUTH.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.AUTH.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.AUTH.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.AUTH.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.AUTH.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddCertificateDefaultResponse</returns>
        public AddCertificateDefaultResponse AddSetting(AddSettingRequest addSettingRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = AddSettingWithHttpInfo(addSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddCertificateDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> AddSettingWithHttpInfo(AddSettingRequest addSettingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addSettingRequest' is set
            if (addSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addSettingRequest' when calling SettingsApi->AddSetting");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.AddSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddCertificateDefaultResponse>("/AddSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddCertificateDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AddCertificateDefaultResponse> AddSettingAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse> localVarResponse = await AddSettingWithHttpInfoAsync(addSettingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddCertificateDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<AddCertificateDefaultResponse>> AddSettingWithHttpInfoAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addSettingRequest' is set
            if (addSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addSettingRequest' when calling SettingsApi->AddSetting");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.AddSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddCertificateDefaultResponse>("/AddSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a setting Deletes a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse DeleteSetting(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = DeleteSettingWithHttpInfo(deleteSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a setting Deletes a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> DeleteSettingWithHttpInfo(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteSettingRequest' is set
            if (deleteSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteSettingRequest' when calling SettingsApi->DeleteSetting");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.DeleteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/DeleteSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a setting Deletes a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> DeleteSettingAsync(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await DeleteSettingWithHttpInfoAsync(deleteSettingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a setting Deletes a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSettingRequest">Deletes a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> DeleteSettingWithHttpInfoAsync(DeleteSettingRequest deleteSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteSettingRequest' is set
            if (deleteSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'deleteSettingRequest' when calling SettingsApi->DeleteSetting");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.DeleteSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/DeleteSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a setting Read a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingDefaultResponse</returns>
        public GetSettingDefaultResponse GetSetting(GetSettingRequest getSettingRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingDefaultResponse> localVarResponse = GetSettingWithHttpInfo(getSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a setting Read a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSettingDefaultResponse> GetSettingWithHttpInfo(GetSettingRequest getSettingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSettingRequest' is set
            if (getSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingRequest' when calling SettingsApi->GetSetting");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSettingDefaultResponse>("/GetSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read a setting Read a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSettingDefaultResponse> GetSettingAsync(GetSettingRequest getSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingDefaultResponse> localVarResponse = await GetSettingWithHttpInfoAsync(getSettingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read a setting Read a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingRequest">Read a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSettingDefaultResponse>> GetSettingWithHttpInfoAsync(GetSettingRequest getSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSettingRequest' is set
            if (getSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingRequest' when calling SettingsApi->GetSetting");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSettingDefaultResponse>("/GetSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a list of settings Reads a list of settings
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingsDefaultResponse</returns>
        public GetSettingsDefaultResponse GetSettings(GetSettingsRequest getSettingsRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> localVarResponse = GetSettingsWithHttpInfo(getSettingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a list of settings Reads a list of settings
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingsDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> GetSettingsWithHttpInfo(GetSettingsRequest getSettingsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSettingsRequest' is set
            if (getSettingsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingsRequest' when calling SettingsApi->GetSettings");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingsRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSettingsDefaultResponse>("/GetSettings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads a list of settings Reads a list of settings
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSettingsDefaultResponse> GetSettingsAsync(GetSettingsRequest getSettingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> localVarResponse = await GetSettingsWithHttpInfoAsync(getSettingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a list of settings Reads a list of settings
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsRequest">Reads a list of settings</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse>> GetSettingsWithHttpInfoAsync(GetSettingsRequest getSettingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSettingsRequest' is set
            if (getSettingsRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingsRequest' when calling SettingsApi->GetSettings");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingsRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSettingsDefaultResponse>("/GetSettings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads settings and their values Reads settings and their values
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSettingsDefaultResponse</returns>
        public GetSettingsDefaultResponse GetSettingsValues(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> localVarResponse = GetSettingsValuesWithHttpInfo(getSettingsValuesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads settings and their values Reads settings and their values
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSettingsDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> GetSettingsValuesWithHttpInfo(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getSettingsValuesRequest' is set
            if (getSettingsValuesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingsValuesRequest' when calling SettingsApi->GetSettingsValues");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingsValuesRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSettingsValues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSettingsDefaultResponse>("/GetSettingsValues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettingsValues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reads settings and their values Reads settings and their values
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSettingsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetSettingsDefaultResponse> GetSettingsValuesAsync(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse> localVarResponse = await GetSettingsValuesWithHttpInfoAsync(getSettingsValuesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reads settings and their values Reads settings and their values
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSettingsValuesRequest">Reads settings and their values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSettingsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<GetSettingsDefaultResponse>> GetSettingsValuesWithHttpInfoAsync(GetSettingsValuesRequest getSettingsValuesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getSettingsValuesRequest' is set
            if (getSettingsValuesRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'getSettingsValuesRequest' when calling SettingsApi->GetSettingsValues");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getSettingsValuesRequest;

            localVarRequestOptions.Operation = "SettingsApi.GetSettingsValues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSettingsDefaultResponse>("/GetSettingsValues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettingsValues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the EM service URL Updates the EM service URL
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse SetEMServiceURL(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = SetEMServiceURLWithHttpInfo(setEMServiceURLRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the EM service URL Updates the EM service URL
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> SetEMServiceURLWithHttpInfo(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setEMServiceURLRequest' is set
            if (setEMServiceURLRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'setEMServiceURLRequest' when calling SettingsApi->SetEMServiceURL");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setEMServiceURLRequest;

            localVarRequestOptions.Operation = "SettingsApi.SetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/SetEMServiceURL", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the EM service URL Updates the EM service URL
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> SetEMServiceURLAsync(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await SetEMServiceURLWithHttpInfoAsync(setEMServiceURLRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the EM service URL Updates the EM service URL
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setEMServiceURLRequest">Updates the EM service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> SetEMServiceURLWithHttpInfoAsync(SetEMServiceURLRequest setEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setEMServiceURLRequest' is set
            if (setEMServiceURLRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'setEMServiceURLRequest' when calling SettingsApi->SetEMServiceURL");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setEMServiceURLRequest;

            localVarRequestOptions.Operation = "SettingsApi.SetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/SetEMServiceURL", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a setting Updates a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LogoutDefaultResponse</returns>
        public LogoutDefaultResponse UpdateSetting(AddSettingRequest addSettingRequest, int operationIndex = 0)
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = UpdateSettingWithHttpInfo(addSettingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a setting Updates a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LogoutDefaultResponse</returns>
        public Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> UpdateSettingWithHttpInfo(AddSettingRequest addSettingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addSettingRequest' is set
            if (addSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addSettingRequest' when calling SettingsApi->UpdateSetting");
            }

            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.UpdateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LogoutDefaultResponse>("/UpdateSetting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a setting Updates a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutDefaultResponse</returns>
        public async System.Threading.Tasks.Task<LogoutDefaultResponse> UpdateSettingAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse> localVarResponse = await UpdateSettingWithHttpInfoAsync(addSettingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a setting Updates a setting
        /// </summary>
        /// <exception cref="Alterian.AUTH.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSettingRequest">Updates a setting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.AUTH.Client.ApiResponse<LogoutDefaultResponse>> UpdateSettingWithHttpInfoAsync(AddSettingRequest addSettingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addSettingRequest' is set
            if (addSettingRequest == null)
            {
                throw new Alterian.AUTH.Client.ApiException(400, "Missing required parameter 'addSettingRequest' when calling SettingsApi->UpdateSetting");
            }


            Alterian.AUTH.Client.RequestOptions localVarRequestOptions = new Alterian.AUTH.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.AUTH.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.AUTH.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addSettingRequest;

            localVarRequestOptions.Operation = "SettingsApi.UpdateSetting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LogoutDefaultResponse>("/UpdateSetting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
